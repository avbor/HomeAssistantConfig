substitutions:
  esp_board: nodemcu-32s
  board_name: sonoff-pow-r3-01
  room_name: Country House
  cse7766_update_interval: 5s

packages:
  wifi: !include common/wifi_ch.yaml
  device_base: !include common/device_base_esp32.yaml

esp32:
  framework:
    type: esp-idf

#wifi:
#  use_address: 192.168.10.149

web_server:
  port: 80

improv_serial: !remove

logger:
  baud_rate: 0

uart:
  rx_pin: GPIO16
  baud_rate: 4800

sensor:
  - platform: cse7766
    current:
      name: ${board_name} Current
      id: a_sensor
      filters:
        - throttle_average: ${cse7766_update_interval}
    voltage:
      name: ${board_name} Voltage
      id: v_sensor
      filters:
        - throttle_average: ${cse7766_update_interval}
    power:
      name: ${board_name} Power
      id: w_sensor
      filters:
        - throttle_average: ${cse7766_update_interval}
    energy:
      name: ${board_name} Energy
      id: wh_sensor
      filters:
        - throttle_average: ${cse7766_update_interval}
    apparent_power:
      name: ${board_name} Apparent Power
      id: ap_sensor
      filters:
        - throttle_average: ${cse7766_update_interval}
    power_factor:
      name: ${board_name} Power Factor
      id: pf_sensor
      filters:
        - throttle_average: ${cse7766_update_interval}

  - platform: total_daily_energy
    name: ${board_name} Total Daily Energy
    power_id: w_sensor

  - platform: internal_temperature
    name: ${board_name} ESP32 Internal Temperature
    device_class: temperature
    unit_of_measurement: Â°C
    id: esp32_temp

#  - platform: template
#    name: ${board_name} Power Factor
#    device_class: power_factor
#    id: power_factor
#    lambda: return id(w_sensor).state / id(v_sensor).state / id(a_sensor).state;

  - platform: esp32_hall
    name: ${board_name} ESP32 Hall Sensor
    update_interval: 60s

binary_sensor:
  - platform: gpio
    pin: GPIO00
    id: reset
    internal: true
    filters:
      - invert:
      - delayed_off: 10ms
    on_click:
      - max_length: 350ms # short press to toggle the relay
        then:
          switch.toggle: relay_1
      - min_length: 360ms # long press to cycle display info
        max_length: 3s
        then:
          - if:
              condition:
                binary_sensor.is_on: page
              then:
                binary_sensor.template.publish:
                  id: page
                  state: OFF
              else:
                binary_sensor.template.publish:
                  id: page
                  state: ON
  - platform: template # this is a fake sensor to tell the screen which info to show on display
    id: page
    publish_initial_state: true
    internal: true
  - platform: template
    name: ${board_name} subordinate device
    id: subordinate_device_on
    lambda: |-
      if (isnan(id(w_sensor).state)) {
        return {};
      } else if (id(w_sensor).state > 4) {
        // Running
        return true;
      } else {
        // Not running
        return false;
      }

display:
  platform: tm1621
  id: tm1621_display
  cs_pin: GPIO25
  data_pin: GPIO14
  read_pin: GPIO26
  write_pin: GPIO27
  lambda: |-
    if (id(page).state) {
      it.display_voltage(true);
      it.display_kwh(false);
      it.printf(0, "%.1f", id(v_sensor).state);
      it.printf(1, "%.1f", id(a_sensor).state);
    } else {  
      it.display_voltage(false);
      it.display_kwh(true);
      it.printf(0, "%.1f", id(wh_sensor).state);
      it.printf(1, "%.1f", id(w_sensor).state);
    }

output:
  - platform: ledc
    id: led
    pin:
      number: GPIO18
      inverted: True

switch:
  - platform: gpio
    name: ${board_name}
    pin: GPIO13
    id: relay_1
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      - delay: 500ms
      - light.turn_on: switch_led
    on_turn_off:
      - delay: 500ms
      - light.turn_off: switch_led
  - platform: restart
    name: ${board_name} Restart

text_sensor:
  - platform: template
    name: ${board_name} Uptime
    id: uptime_human
    icon: mdi:clock-start
  - platform: wifi_info
    ip_address:
      name: ${board_name} IP
    ssid:
      name: ${board_name} SSID
    bssid:
      name: ${board_name} BSSID

light:
  - platform: monochromatic
    id: switch_led
    output: led
    internal: True
  - platform: status_led
    id: wifi_status_led
    internal: True
    pin:
      number: GPIO05
      inverted: True

interval:
  - interval: 30s
    then:
      if:
        condition:
          wifi.connected:
        then:
          - light.turn_on: wifi_status_led
        else:
          - light.turn_off: wifi_status_led